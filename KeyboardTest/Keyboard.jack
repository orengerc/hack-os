// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int KEYBOARD, LINE_SIZE;
    static char BACK_SPACE, NEW_LINE;

    /** Initializes the keyboard. */
    function void init() {
        let KEYBOARD = 24576;
        let LINE_SIZE = 64;
        let BACK_SPACE = 129;
        let NEW_LINE = 128;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(KEYBOARD);
    }

    /**
     * Gets that pressed key, doesn't handle cursor
     */
    function char getchar(){
        var char key_pressed, ch;

        //wait until key pressed
        while (key_pressed = 0){
            let key_pressed = Keyboard.keyPressed();
        }

        //save key
        let ch = key_pressed;

        //wait until user stops pressing the key
        while(~(key_pressed=0)){
            let key_pressed = Keyboard.keyPressed();
        }

        return ch;    
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;
        
        //display cursor
        do Output.printChar(0);

        // get char pressed
        let c = Keyboard.getchar();

        //move cursor back
        do Output.printChar(BACK_SPACE);
        
        //display c at the current cursor location (also advances the cursor)
        do Output.printChar(c);

        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String line;
        var char ch;
        var int EOL;
        let line = String.new(LINE_SIZE);
        let EOL = 0;

        do Output.printString(message);

        //read characters one be one
        while(true){

            //read pressed char (also prints it to screen)
            let ch = Keyboard.readChar();

            //case 1: new line
            if(ch = NEW_LINE) {
                do Output.printString(line);  // print whole line
                do Output.println();         // print new line
                return line;
            }

            //case 2: backspace 
            if(ch = BACK_SPACE) {
                do line.eraseLastChar();
            }

            //case 3: else
            else {
                do line.appendChar(ch);
            }
        }

        return line;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String line;
        let line =  Keyboard.readLine(message);  //also displays message to screen
        return line.intValue();
    }
}
