// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM, freeList;
    static int HEAP_BASE, HEAP_SIZE, HEAP_END;
    
    /** Initializes memory parameters. */
    function void init() {
        //system constants:
        let RAM = 0;
		let HEAP_BASE = 2048;
		let HEAP_SIZE = 14334;
        let HEAP_END = 16384;
        
        //class constants:
        let freeList = HEAP_BASE;
        let freeList[0] = HEAP_SIZE;  // free length => all of the heap
        let freeList[1] = 0;         // next => null
        return;
    }

    function int inc(int x, int a){
        return (x + a);
    }

    /* inserts the block properly into the spot */
    function Array injectBlockToMemory(Array block, int size) {
        var int block_size;
        var Array next_list;
        
        if(~( block[0] > (Memory.inc(size, 3)) )) {
            let block_size = block[0];
            let next_list = block[1];
            let block = Memory.inc(block, 1);
            let block[-1] = block_size;
        }
        else {
            let next_list = Memory.inc(block, Memory.inc(size, 1));
            let next_list[1] = block[1];
            let next_list[0] = block[0] - (next_list - block);
            let block = block + 1;
            let block[-1] = Memory.inc(size, 1);
        }
        
        return next_list;
    }

    /*Finds the best fit for memory block of the needed size*/
    function Array findBestFit(int size) {
        var Array current, best_fit, previous;
        var int curr_size, best_fit_size;
        
        let current = freeList;
        let best_fit = HEAP_END;
        let previous = 0;
        let best_fit_size = HEAP_SIZE;
        
        //search for the best block
        while( ~(current = 0) ) {
            let curr_size = Memory.inc(current[0], -1);
            if((curr_size < best_fit_size) & ((curr_size > size) | (size = curr_size))) {
                let best_fit_size = curr_size;
                let best_fit = previous;
            }
            let previous = current;
            let current = current[1];
        }
        
        return best_fit;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function Array alloc(int size) {
        var Array previous, block;

        let previous = Memory.findBestFit(size);   

        //if found a proper fit:
        if(~(previous = HEAP_END)) {
            if(~( previous = 0 )) {
                let block = previous[1];
                let previous[1] = Memory.injectBlockToMemory(block, size);
            }
            else {
                let block = freeList;                
                let freeList = Memory.injectBlockToMemory(block, size);
            }
            return Memory.inc(1, block);
        }
        return -1;  
    }

    // injects into 2 first indexi of array
    function void inject(Array arr, int x, int y){
        let arr[0] = x;
        let arr[1] = y;
        return;
    }


    /** De-allocates the given object and frees its space. */
    function void deAlloc(Array o) {
        var int alloc_size;
        var Array next_list, previous;
        
        let alloc_size = o[-1];
        let o = Memory.inc(o, -1);

        if( freeList > o ) {
            let previous = 0;
        }  
        else {      
            let previous = freeList;
            while( ~(previous[1] = 0) & (previous[1] < o) ) {
                let previous = previous[1];
            }
        }
        
        if(~ (previous = 0) ) {
            if( Memory.inc(previous, (previous[0])) = o ) {
                let previous[0] = previous[0] + alloc_size;
            }
            else {
                do Memory.inject(o, alloc_size, previous[1]);
                let previous[1] = o;
                let previous = o;
            }
        }
        else {
            do Memory.inject(o, alloc_size, freeList);
            let freeList = o;
            let previous = o;
        }
        
        if( previous[1] = (previous + previous[0]) ) {
            let next_list = previous[1];
            let previous[0] = previous[0] + next_list[0];
            let previous[1] = next_list[1];
        }
        return;
    }    


    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let RAM[address] = value;
		return;
    }

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
		var int max, i, curr;
        let max = o[0];  
        let i = 1;
        //iterate untill the end of array:
        while(i < (RAM[o-1]-1)){
            let curr = o[i];
            //if found larger than max, switch max
            if(curr > max){
                let max = curr;
            }
            let i = i + 1;
        }
        return max;
    }


}

